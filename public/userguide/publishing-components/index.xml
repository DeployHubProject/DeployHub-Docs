<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DeployHub User Guide and API Reference â€“ Publishing Components</title>
    <link>/userguide/publishing-components/</link>
    <description>Recent content in Publishing Components on DeployHub User Guide and API Reference</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="/userguide/publishing-components/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Userguide: Intro to  Components</title>
      <link>/userguide/publishing-components/intro-to-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/userguide/publishing-components/intro-to-components/</guid>
      <description>
        
        
        &lt;h2 id=&#34;intro-to-_components_&#34;&gt;Intro to &lt;em&gt;Components&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;DeployHub manages microservices and other reusable objects as &lt;em&gt;Components&lt;/em&gt;.  &lt;em&gt;Components&lt;/em&gt; are assigned to an &lt;em&gt;Application&lt;/em&gt; even though they are managed independently.  Assign &lt;em&gt;Components&lt;/em&gt; to &lt;em&gt;Applications&lt;/em&gt; to track a &amp;rsquo;logical&amp;rsquo; view of your software solution. In a monolithic approach, we performed this step during the software compile and link, or &amp;lsquo;build&amp;rsquo; process. In microservices, they are loosely coupled and linked at run-time. Defining &lt;em&gt;Components&lt;/em&gt; to &lt;a href=&#34;/userguide/packaging-applications/buildingapplications/&#34;&gt;&lt;em&gt;Applications&lt;/em&gt;&lt;/a&gt; puts the &lt;em&gt;Application&lt;/em&gt; in a &amp;rsquo;logical&amp;rsquo; view.&lt;/p&gt;
&lt;p&gt;If you are an API or microservice developer, this will be where you do most of your work. However, application developers may also define &lt;em&gt;Components&lt;/em&gt; that are used only by their specific &lt;em&gt;Application&lt;/em&gt;. &lt;em&gt;Components&lt;/em&gt; are microservices (containers), Database updates or files, along with Pre and Post &lt;a href=&#34;/userguide/customizations/2-define-your-actions/#intro-to-actions&#34;&gt;&lt;em&gt;Actions&lt;/em&gt;&lt;/a&gt; that are used to control the deployment of the &lt;em&gt;Component&lt;/em&gt;. By tracking the low level deployment metadata for a &lt;em&gt;Component&lt;/em&gt;, it can be easily shared and released in a consistent way across organizational teams and &lt;em&gt;Environments&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Components&lt;/em&gt; change over time, and so DeployHub contains &lt;em&gt;Component Base Versions&lt;/em&gt; and &lt;em&gt;Component Versions&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Base Version&lt;/strong&gt; : The initial definition of a &lt;em&gt;Component&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Version&lt;/strong&gt; : A child of the &lt;em&gt;Component Base Version&lt;/em&gt; that represents changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;components-and-domains&#34;&gt;Components and Domains&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Components&lt;/em&gt; are organized by &lt;em&gt;Domains&lt;/em&gt;. When you create a new &lt;em&gt;Component&lt;/em&gt; you publish it to the &lt;em&gt;Domain&lt;/em&gt; that defines the &amp;ldquo;Solution Space&amp;rdquo; the &lt;em&gt;Component&lt;/em&gt; addresses.  By organizing &lt;em&gt;Components&lt;/em&gt; into &lt;em&gt;Domains&lt;/em&gt;, you create a catalog that allows other teams within your organization to find and reuse your &lt;em&gt;Components&lt;/em&gt;. The organization of &lt;em&gt;Components&lt;/em&gt; by &lt;em&gt;Domains&lt;/em&gt; support the Domain Driven Design of a microservices architecture. Before you begin publishing &lt;em&gt;Components&lt;/em&gt;, you will need to have a &lt;em&gt;Domain&lt;/em&gt; ready.  For more on &lt;em&gt;Domains&lt;/em&gt; see the &lt;a href=&#34;/userguide/first-steps/2-defining-domains/&#34;&gt;Building Your Domain Catalog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;_components_-and-_applications_&#34;&gt;&lt;em&gt;Components&lt;/em&gt; and &lt;em&gt;Applications&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Components&lt;/em&gt; are consumed by &lt;em&gt;Applications&lt;/em&gt;. You track a &amp;rsquo;logical&amp;rsquo; view of your complete software solution by seeing which &lt;em&gt;Components&lt;/em&gt; the &lt;em&gt;Application&lt;/em&gt; uses.  Defining &lt;em&gt;Components&lt;/em&gt; to &lt;em&gt;Applications&lt;/em&gt; is a &amp;ldquo;packaging&amp;rdquo; process done at the &lt;em&gt;Application&lt;/em&gt; level.&lt;/p&gt;
&lt;p&gt;There is a many-to-many relationship between &lt;em&gt;Applications&lt;/em&gt; and &lt;em&gt;Components.&lt;/em&gt; An &lt;em&gt;Application&lt;/em&gt; can contain many different &lt;em&gt;Components&lt;/em&gt;. A &lt;em&gt;Component&lt;/em&gt; can be used across many different &lt;em&gt;Applications&lt;/em&gt;. &lt;em&gt;Components&lt;/em&gt; can be easily shared between &lt;em&gt;Applications&lt;/em&gt;. DeployHub tracks and versions these &lt;em&gt;Component&lt;/em&gt; relationships including to which &lt;em&gt;Applications&lt;/em&gt; they have been assigned.&lt;/p&gt;
&lt;h2 id=&#34;sharing-_components_&#34;&gt;Sharing &lt;em&gt;Components&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;If you want your microservice &lt;em&gt;Component&lt;/em&gt; to be shared across your teams, publish your &lt;em&gt;Component&lt;/em&gt; to a &lt;em&gt;Domain&lt;/em&gt; that allows sharing. If it is defined to only your &lt;em&gt;Application,&lt;/em&gt; then only your team will be able to see it.&lt;/p&gt;
&lt;h2 id=&#34;_component_-versioning&#34;&gt;&lt;em&gt;Component&lt;/em&gt; Versioning&lt;/h2&gt;
&lt;p&gt;DeployHub uses a backend versioning engine to track your &lt;em&gt;Components&lt;/em&gt;. Versioning tracks &lt;em&gt;Component&lt;/em&gt; attributes including low level information that is needed for other teams to reuse your &lt;em&gt;Component&lt;/em&gt; including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GiHub, Bugzilla, Jire Change Request (DeployHub Pro Feature)&lt;/li&gt;
&lt;li&gt;Gitrepo&lt;/li&gt;
&lt;li&gt;Git commit (Branch and Tag)&lt;/li&gt;
&lt;li&gt;CD Build / Workflow Number&lt;/li&gt;
&lt;li&gt;Container SHA&lt;/li&gt;
&lt;li&gt;Docker Registry&lt;/li&gt;
&lt;li&gt;Environment Vairaibles&lt;/li&gt;
&lt;li&gt;Deployment script (Hlem Chart, Ansible Playbook, etc.)&lt;/li&gt;
&lt;li&gt;Any Attributes (DB Name for example) such as the &lt;em&gt;Action&lt;/em&gt; used to perform the deployment, environment variables, and database schemas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This information is collected when you define your &lt;em&gt;Component&lt;/em&gt; to the DeployHub catalog. You can use the DeployHub APIs to automatically update this information via your CD Pipeline once you have defined your &lt;em&gt;Component Base Version&lt;/em&gt;. When your CD engine initiates a workflow for the &lt;em&gt;Component&lt;/em&gt;, it indicates that a new version of the &lt;em&gt;Component&lt;/em&gt; is being pushed across the Pipeline causing all consuming &lt;em&gt;Applications&lt;/em&gt; to be automatically incremented to a new version number.  If a &lt;em&gt;Component&lt;/em&gt; changes, the consuming &lt;em&gt;Application&lt;/em&gt; also changes.  Both get a new version number. For more information see &lt;a href=&#34;/userguide/pipeline/2-define-your-build-engines/&#34;&gt;CD Engines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you first define your &lt;em&gt;Component&lt;/em&gt; DeployHub tracks it as the &lt;em&gt;Component Base Version&lt;/em&gt;. Subsequent updates to that &lt;em&gt;Component&lt;/em&gt; creates a new &lt;em&gt;Component Version&lt;/em&gt; which represent the updates over time. A &lt;em&gt;Component Base Version&lt;/em&gt; is always the first one created, and it acts as a model for subsequent &lt;em&gt;Component Versions&lt;/em&gt;. Otherwise they are identical types of objects.&lt;/p&gt;
&lt;p&gt;DeployHub uses a simple versioning number schema starting at 1 and incrementing over time, for example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; Myapp;1, Myapp;2.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use your CI/CD process to include variance in your versioning number (base name, variant, version).  See &lt;a href=&#34;/userguide/integrations/ci-cd_integrations/#_component_-versioning-schema&#34;&gt;Component Versioning Schema&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Userguide: Defining Components</title>
      <link>/userguide/publishing-components/2-define-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/userguide/publishing-components/2-define-components/</guid>
      <description>
        
        
        &lt;h2 id=&#34;_component_-list-view-allows-adding-or-deleting&#34;&gt;&lt;em&gt;Component&lt;/em&gt; List View allows Adding or Deleting&lt;/h2&gt;
&lt;p&gt;Use the &lt;em&gt;Component&lt;/em&gt; List View accessible from the left hand &lt;em&gt;Component&lt;/em&gt; menu option to manage your &lt;em&gt;Components Base Version&lt;/em&gt; and &lt;em&gt;Component Versions&lt;/em&gt;. Because each &lt;em&gt;Environment&lt;/em&gt; has a row where the &lt;em&gt;Component Base Version&lt;/em&gt; or &lt;em&gt;Component Version&lt;/em&gt; has been deployed, there can be multiple entries for the same &lt;em&gt;Component&lt;/em&gt; if it has been deployed to multiple &lt;em&gt;Environments&lt;/em&gt;. A list of all &lt;em&gt;Components&lt;/em&gt; is organized by the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;List Column&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Component Base Version&lt;/em&gt; or &lt;em&gt;Component Version&lt;/em&gt; number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Domain&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Domain&lt;/em&gt; to which the &lt;em&gt;Component&lt;/em&gt; belongs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Parent&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Component Base Version&lt;/em&gt; from which the &lt;em&gt;Component Version&lt;/em&gt; was created. This will be empty for the &lt;em&gt;Component Base Version&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Environment&lt;/em&gt; to which the &lt;em&gt;Component&lt;/em&gt; has been deployed. Each &lt;em&gt;Environment&lt;/em&gt; will represent a different row in the List View table.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Last Deployment to Environment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Deployment Log number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Completed&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The date and time of the last deployment to the listed &lt;em&gt;Environment&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Success or Fail.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: If you have not defined any &lt;em&gt;Components&lt;/em&gt; to DeployHub, you will see only the sample data.&lt;/p&gt;
&lt;p&gt;You can also use the Filter bar, represented by a funnel icon, to reorder your &lt;em&gt;Component&lt;/em&gt; List View:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain&lt;/li&gt;
&lt;li&gt;Environment&lt;/li&gt;
&lt;li&gt;Last Deployment&lt;/li&gt;
&lt;li&gt;Parent&lt;/li&gt;
&lt;li&gt;Result&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;additional-tabs-from-the-_component_-list-view&#34;&gt;Additional Tabs from the &lt;em&gt;Component&lt;/em&gt; List View&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tab&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Refreshes the browser.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+Add Base&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows you to Add a new &lt;em&gt;Component Base Version&lt;/em&gt;. You will select from one of three types: Container, Application File, Database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+Add Version&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Creates a copy of the selected &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Delete&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Deletes the selected item. However, you must delete the &lt;em&gt;Components&lt;/em&gt; starting from the newest to the oldest.  The &lt;em&gt;Component Base Version&lt;/em&gt; would be deleted last. Sorting by &amp;ldquo;Version&amp;rdquo; gives you the order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Return to List View if in the Map View.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Displays a global Map of all &lt;em&gt;Component&lt;/em&gt; versions, with their &lt;em&gt;Application&lt;/em&gt; relationships.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_component_-types&#34;&gt;&lt;em&gt;Component&lt;/em&gt; Types&lt;/h2&gt;
&lt;p&gt;When adding new &lt;em&gt;Components&lt;/em&gt; select the  &lt;em&gt;Component&lt;/em&gt; Type from the drop down list/:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Container&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;For Containers such as Docker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Application File&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;For binary files such as .jar, .war, .ear, .exe, .dll, Linux executable files, Oracle Forms, or similar artifacts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;For SQL files such as .ddl or other database update scripts.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;how-to-view-and-edit-_components_&#34;&gt;How to View and Edit &lt;em&gt;Components&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Components&lt;/em&gt; are defined as Container, Application File, or Database.  These are the different types of &lt;em&gt;Components&lt;/em&gt; you may need from microservices to binaries and DB updates. The Dashboard view displays all information related to a specific &lt;em&gt;Component Base Version&lt;/em&gt; or &lt;em&gt;Component Version&lt;/em&gt;. Depending on what type of &lt;em&gt;Component&lt;/em&gt; you are defining, you will be presented with different data definition fields.&lt;/p&gt;
&lt;p&gt;The following fields are common to all &lt;em&gt;Components&lt;/em&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Owner&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The owner of the &lt;em&gt;Component&lt;/em&gt;, whose default value is the creator of the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Owner Email&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The email of the owner. Important for knowing who to contact in the case of an anomaly.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Service Owner Phone&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The phone number of the owner.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PagerDuty Business Service URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter the address to the PagerDuty page that is associated to the business service for this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PagerDuty Service URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter the address to the PagerDuty page that is associated to the &lt;em&gt;Component&lt;/em&gt; itself.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Slack Channel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter what Slack Channel that can be used to report issues about this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Discord Channel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter the Discord Invite Link you would like your consumers to use for this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;HipChat Channel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter the HipChat Channel that can be used to report issues about this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Full Domain&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The fully qualified path of the &lt;em&gt;Domain&lt;/em&gt; that the &lt;em&gt;Component&lt;/em&gt; is to be associated, showing all parent &lt;em&gt;Domains&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The name of the &lt;em&gt;Component.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A short text field with a description of the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Component Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The kind of Component created, i..e. Container, Application File, or Database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Used to map the &lt;em&gt;Component&lt;/em&gt; to &lt;em&gt;Endpoints&lt;/em&gt; within an &lt;em&gt;Environment&lt;/em&gt; at deployment.  This allows DeployHub to map the &lt;em&gt;Component&lt;/em&gt; to the correct &lt;em&gt;Endpoint&lt;/em&gt; when moving across different environments.  You can add your own &lt;em&gt;Endpoint&lt;/em&gt; Types from the Customize Types menu or select from the default options.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Change Request Data Source&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This &lt;em&gt;Data Source&lt;/em&gt; is assigned to the &lt;em&gt;Component&lt;/em&gt; for tracking Change Request. A Change Request Data Source must be pre-defined for this field to be used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Assigning a Category to an Object allows lists of Objects based on Categories to be used throughout DeployHub. Add a new Category in the entry field or use an existing Category displayed in the drop down. Categories are most commonly associated with &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt;. Pre-defined Categories include: &lt;li&gt;Build - &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for calling ANT (SalesForce integration).&lt;/li&gt;&lt;li&gt;Database - &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for database updates.&lt;/li&gt;&lt;li&gt;Deploy- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for Deployments.&lt;/li&gt;&lt;li&gt;Dropzone- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for interacting with the Dropzone.&lt;/li&gt;&lt;li&gt;File Logic- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; related to File manipulation.&lt;/li&gt;&lt;li&gt;Flow Logic- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for if then else in DMScript.&lt;/li&gt;&lt;li&gt;Loops- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for file looping.&lt;/li&gt;&lt;li&gt;General-Non-categorized Objects (default).&lt;/li&gt;&lt;li&gt;WebLogic- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for deploying to WebLogic.&lt;/li&gt;&lt;li&gt;WebSphere- &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; for deploying to WebSphere.&lt;/li&gt;&lt;li&gt;Windows- &lt;em&gt;Actions, Functions&lt;/em&gt; and &lt;em&gt;Procedures&lt;/em&gt; used for Windows deployments.&lt;/li&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Always Deploy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Component&lt;/em&gt; is deployed to the associated &lt;em&gt;Endpoints&lt;/em&gt; in the &lt;em&gt;Target Environment&lt;/em&gt; regardless if the &lt;em&gt;Component&lt;/em&gt; is already present on the &lt;em&gt;Endpoints&lt;/em&gt;. This is useful for monolithic applications where you want to copy over a binary for example.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Deploy Sequentially&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Normally when a &lt;em&gt;Component&lt;/em&gt; in an &lt;em&gt;Application&lt;/em&gt; is deployed to several &lt;em&gt;Endpoints&lt;/em&gt; in an &lt;em&gt;Environment&lt;/em&gt;, it is deployed to each &lt;em&gt;Endpoint&lt;/em&gt; at the same time (in parallel). The &amp;ldquo;Deploy Sequentially&amp;rdquo; option changes this behavior to force the &lt;em&gt;Component&lt;/em&gt; to deploy to each &lt;em&gt;Endpoint&lt;/em&gt; in turn, sequentially.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Custom Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An &lt;em&gt;Action&lt;/em&gt; that replaces the usual Deployment Engine processing. Custom &lt;em&gt;Actions&lt;/em&gt; can be used to call Ansible, Helm or other external deployment tools.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;container-specific-data-definition&#34;&gt;Container Specific Data Definition&lt;/h3&gt;
&lt;p&gt;Helm is the default for deploying Container &lt;em&gt;Components&lt;/em&gt;. DeployHub interfaces with Helm to support a Kubernetes Cluster deployment. Initially, you will need to create a &lt;em&gt;Custom Action&lt;/em&gt; for using Helm as your deployment engine. Once your &lt;a href=&#34;/userguide/customizations/2-define-your-actions/&#34;&gt;&lt;em&gt;Custom Action&lt;/em&gt;&lt;/a&gt; has been created, it can be reused by all &lt;em&gt;Users&lt;/em&gt; as long as you define the &lt;em&gt;Custom Action&lt;/em&gt; to your &amp;ldquo;Global&amp;rdquo; Domain. Follow the steps at &lt;a href=&#34;/userguide/integrations/helm&#34;&gt;Helm for Container Deployments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: You can also create your own &lt;em&gt;Custom Action&lt;/em&gt; if you would like to use another deployment engine.&lt;/p&gt;
&lt;p&gt;A Container &lt;em&gt;Component&lt;/em&gt; has the following optional attributes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Field&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build Date&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The timestamp from when the last build job was run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The internal identifier for the &lt;em&gt;Build Engine&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The URL to the &lt;em&gt;Build Engine&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Container Registry&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Container registry where the Container is stored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Container Digest&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The SHA number of the Container image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Container Tag&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The tag that was assigned to the Container image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Helm Chart&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Helm Chart used to deploy the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Helm Chart Namespace&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The sub-division of the Kubernetes cluster where your &lt;em&gt;Component&lt;/em&gt; Container should run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Helm Chart Repo URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Enter the URL to where the chart is located, for example:  Bitnami, ArtifactHub, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Helm Chart Version&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Helm Chart Version from the Helm Repository.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Git Commit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Git SHA number. Populated when integrated into Continuous Delivery Pipelines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Git Repo&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Git Repository that triggered the build.Populated when integrated into Continuous Delivery Pipelines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Git Tag&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The last tag for the Git Repository. Populated when integrated into Continuous Delivery Pipelines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Git URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The URL for the Git Repository.Populated when integrated into Continuous Delivery Pipelines.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;application-file-specific-data-definition&#34;&gt;Application File Specific Data Definition&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Field&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Base Directory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Base, or high level, directory where the file will be deployed. This value will be ignored if the &lt;em&gt;Endpoint&lt;/em&gt; has a Base Directory defined.  See &lt;a href=&#34;/publishing-components/2-define-components/#formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting Directories&lt;/a&gt; on the order of how the deployment directory is formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Target Directory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The directory under the Base Directory where the file will be deployed, or final &amp;ldquo;Target&amp;rdquo; Directory. See &lt;a href=&#34;/publishing-components/2-define-components/#formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting Directories&lt;/a&gt; on the order of how the deployment directory is formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pre-Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An &lt;em&gt;Action&lt;/em&gt; that is to be run prior to the deployment of this &lt;em&gt;Component&lt;/em&gt;. This can be used to perform prerequisite requirements, such as creating directories, creating files from scratch, or moving files between directories.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Post-Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An &lt;em&gt;Action&lt;/em&gt; that is to be run after the deployment of this &lt;em&gt;Component&lt;/em&gt;. This can be used to execute actions on the target &lt;em&gt;Endpoint&lt;/em&gt; after the &lt;em&gt;Component&lt;/em&gt; has been deployed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build Job&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Continuous Delivery Build Job that is used to build/compile the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Last Build Number&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The number of the last Continuous Delivery (CD) Workflow that created the files referenced within the &lt;em&gt;Component.&lt;/em&gt; This number will default to the Build ID if one is not set by the CD Workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The internal identifier for the &lt;em&gt;Build Engine&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build URL&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The URL to the &lt;em&gt;Build Engine&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build Date&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The timestamp from when the last build job was run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Choose the Repository that contains your &lt;em&gt;Application&lt;/em&gt; binaries, files, etc. This list box is populated based on the &lt;em&gt;Repositories&lt;/em&gt; pre-defined in your initial setup. Based on the &lt;em&gt;Repository&lt;/em&gt; you select, you may be provided override or append fields if they were made available. For a list of the &lt;em&gt;Repositories&lt;/em&gt;  See &lt;a href=&#34;/first-steps/2-define-repositories/#using-the-repository-dashboard-for-viewing-and-editing&#34;&gt;Connecting Your Repositories&lt;/a&gt; for more information.&lt;ul&gt;&lt;li&gt;Filepath Override: Enter a filepath that will override the default filepath defined at the &lt;em&gt;Repository&lt;/em&gt; level.&lt;/li&gt;&lt;li&gt;Pattern Override: Enter a pattern that will override the default pattern defined at the &lt;em&gt;Repostory&lt;/em&gt; level.  Patterns are file types you want to pull from the &lt;em&gt;Repository&lt;/em&gt;, such as *.exe, *.dll, *.war. &lt;/li&gt;&lt;li&gt;Recursive Override: Select the box in order to override the default recursive behavior defined at the &lt;em&gt;Repository&lt;/em&gt; level. This will turn recursion on or off depending on the setting at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;li&gt;Version Override: Overrides the default template of your versioning pattern defined at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;database-specific-data-definition&#34;&gt;Database Specific Data Definition&lt;/h3&gt;
&lt;p&gt;Database &lt;em&gt;Components&lt;/em&gt; are used for making database updates such as table changes using SQL Scripts. Note: An database form (such as an Oracle Form) can be compiled and should be defined as an Application File not Database &lt;em&gt;Component&lt;/em&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Base Directory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Base, or high level, directory where the file will be deployed. This value will be ignored if the &lt;em&gt;Endpoint&lt;/em&gt; has a Base Directory defined.  See &lt;a href=&#34;/publishing-components/2-define-components/#formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting Directories&lt;/a&gt; on the order of how the deployment directory is formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pre-Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An &lt;em&gt;Action&lt;/em&gt; that is to be run prior to the deployment of this &lt;em&gt;Component&lt;/em&gt;. This can be used to perform prerequisite requirements, such as creating directories, creating files from scratch, or moving files between directories.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Post-Action&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An &lt;em&gt;Action&lt;/em&gt; that is to be run after the deployment of this &lt;em&gt;Component&lt;/em&gt;. This can be used to execute actions on the target &lt;em&gt;Endpoint&lt;/em&gt; after the &lt;em&gt;Component&lt;/em&gt; has been deployed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Roll Forward Target Directory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The directory under the Base Directory where the Roll Forward file will be deployed, or final &amp;ldquo;Target&amp;rdquo; Directory. See &lt;a href=&#34;/publishing-components/2-define-components/#formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting Directories&lt;/a&gt; on the order of how the deployment directory is formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Roll Forward Repository&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Choose the Repository that contains your Roll Forward SQL. This list box is populated based on the &lt;em&gt;Repositories&lt;/em&gt; pre-defined in your initial setup. Based on the &lt;em&gt;Repository&lt;/em&gt; you select, you may be provided override or append fields if they were made available. For more information on &lt;em&gt;Repositories&lt;/em&gt; see &lt;a href=&#34;/first-steps/2-define-repositories/#using-the-repository-dashboard-for-viewing-and-editing&#34;&gt;Connecting Your Repositories&lt;/a&gt;.&lt;ul&gt;&lt;li&gt;Filepath Override: Enter a filepath that will override the default filepath defined at the &lt;em&gt;Repository&lt;/em&gt; level.&lt;/li&gt;&lt;li&gt;Pattern Override: Enter a pattern that will override the default pattern defined at the &lt;em&gt;Repository&lt;/em&gt; level.  Patterns are file types you want to pull from the &lt;em&gt;Repository&lt;/em&gt;, such as *.exe, *.dll, *.war. &lt;/li&gt;&lt;li&gt;Recursive Override: Select the box in order to override the default recursive behavior defined at the &lt;em&gt;Repository&lt;/em&gt; level. This will turn recursion on or off depending on the setting at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;li&gt;Version Override: Overrides the default template of your versioning pattern defined at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Rollback Target Directory&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The directory under the Base Directory where the Rollback file will be deployed, or final &amp;ldquo;Target&amp;rdquo; Directory. See &lt;a href=&#34;/publishing-components/2-define-components/#formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting Directories&lt;/a&gt; on the order of how the deployment directory is formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Rollback Repository&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Choose the Repository that contains your Roll Forward SQL. This list box is populated based on the &lt;em&gt;Repositories&lt;/em&gt; pre-defined in your initial setup. Based on the &lt;em&gt;Repository&lt;/em&gt; you select, you may be provided override or append fields if they were made available. For more information on &lt;em&gt;Repositories&lt;/em&gt; see &lt;a href=&#34;/first-steps/2-define-repositories/#using-the-repository-dashboard-for-viewing-and-editing&#34;&gt;Connecting Your Repositories&lt;/a&gt;.&lt;ul&gt;&lt;li&gt;Filepath Override: Enter a filepath that will override the default filepath defined at the &lt;em&gt;Repository&lt;/em&gt; level.&lt;/li&gt;&lt;li&gt;Pattern Override: Enter a pattern that will override the default pattern defined at the &lt;em&gt;Repository&lt;/em&gt; level.  Patterns are file types you want to pull from the &lt;em&gt;Repository&lt;/em&gt;, such as *.exe, *.dll, *.war. &lt;/li&gt;&lt;li&gt;Recursive Override: Select the box in order to override the default recursive behavior defined at the &lt;em&gt;Repository&lt;/em&gt; level. This will turn recursion on or off depending on the setting at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;li&gt;Version Override: Overrides the default template of your versioning pattern defined at the &lt;em&gt;Repository&lt;/em&gt; level. &lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;formatting-of-the-deployment-directory-with-base-and-target-directories-for-database-and-application-file-deployments&#34;&gt;Formatting of the Deployment Directory with Base and Target Directories for Database and Application File Deployments&lt;/h3&gt;
&lt;p&gt;You must define the directory where your &lt;em&gt;Component&lt;/em&gt; file is going to be deployed on your &lt;em&gt;Endpoint&lt;/em&gt;.  This is the purpose of your &lt;em&gt;Component&lt;/em&gt; Base and Target Directories. The Base Directory is the high level directory, the Target Directory is the lower level, or final &amp;ldquo;Target&amp;rdquo; directory.  &lt;em&gt;Endpoints&lt;/em&gt; may be managed by a System Administrator who may want to force the use of a particular Base Directory on the &lt;em&gt;Endpoint&lt;/em&gt;.  If so, this directory can be set at the &lt;em&gt;Endpoint&lt;/em&gt; Base Directory and override the &lt;em&gt;Component&lt;/em&gt; level Base Directory.  When a deployment occurs, the process will check to see if the &lt;em&gt;Endpoint&lt;/em&gt; has a Base Directory defined, and will replace the &lt;em&gt;Component&lt;/em&gt; Base Directory with the &lt;em&gt;Endpoint&lt;/em&gt; Base Directory to create the full path for the deployment.&lt;/p&gt;
&lt;p&gt;Below is how the full file deployment path is formatted:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component Base Directory Value&lt;/th&gt;
&lt;th&gt;Component Target Directory Value&lt;/th&gt;
&lt;th&gt;Endpoint Base Directory Value&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;The files will be placed in the &lt;em&gt;Component&lt;/em&gt; Base Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;The files will be placed in the &lt;em&gt;Component&lt;/em&gt; Target Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;The files will be placed in the &lt;em&gt;Endpoint&lt;/em&gt; Base Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;The files will be placed in the Endpoint Base Directory + Component Target Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;The files will be placed in the &lt;em&gt;Endpoint&lt;/em&gt; Base Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;The files will be placed in the Component Base Directory + Component Target Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Has Value&lt;/td&gt;
&lt;td&gt;Endpoint Base Directory + Component Target Directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;Deployment will fail.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;component-readme&#34;&gt;Component Readme&lt;/h2&gt;
&lt;p&gt;Give your users more information about your Container, Application File or Database Component. You can upload an external readme file to provide any information that you need to convey to your potential consumers. Use the &amp;lsquo;Upload&amp;rsquo; option to select a file. It must be in text format. You can also automate the upload - see below.&lt;/p&gt;
&lt;h2 id=&#34;component-swagger&#34;&gt;Component Swagger&lt;/h2&gt;
&lt;p&gt;Publish your &lt;a href=&#34;/userguide/integrations/swagger&#34;&gt;Swagger API&lt;/a&gt; definitions to provide further information about your restful APIs and the parameters needed. DeployHub takes your .json or .yaml file and renders it using &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;. Use the &amp;lsquo;Upload&amp;rsquo; option to associate your .json or .yaml file to that specific &lt;em&gt;Component Version&lt;/em&gt;. You can also automate the upload - see below.&lt;/p&gt;
&lt;h2 id=&#34;component-sbom&#34;&gt;Component SBOM&lt;/h2&gt;
&lt;p&gt;Publish your Component&amp;rsquo;s SBOM to show packages and licenses your Component is consuming. SBOMs are required for populating the CVEs.&lt;/p&gt;
&lt;h2 id=&#34;component-vulnerabilities&#34;&gt;Component Vulnerabilities&lt;/h2&gt;
&lt;p&gt;Component vulnerabilities are based on your SBOM. Every thirty minutes, DeployHub updates the Component vulnerabilities based on OSV.Dev. For more information refer to &lt;a href=&#34;/userguide/integrations/osvdev/&#34;&gt;OSV.Dev section&lt;/a&gt; of this documentation.&lt;/p&gt;
&lt;h2 id=&#34;component-license&#34;&gt;Component License&lt;/h2&gt;
&lt;p&gt;Report the license associated with your code base for your &lt;em&gt;Component&lt;/em&gt;. Use the &amp;lsquo;Upload&amp;rsquo; option to import your License file into DeployHub. The file must be in a text format.&lt;/p&gt;
&lt;h2 id=&#34;automate-the-readme-sbom-license-and-swagger-upload-via-your-pipeline&#34;&gt;Automate the Readme, SBOM, License, and Swagger Upload via Your Pipeline&lt;/h2&gt;
&lt;p&gt;You can automatically upload you readme, SBOM, License, and Swagger data using the Command Line Interface (CLI) added to your pipeline. For more information review the &lt;a href=&#34;https://github.com/Ortelius/cli/blob/main/doc/dh.md&#34;&gt;CI/CD CLI details&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;key-value-configurations&#34;&gt;Key Value Configurations&lt;/h3&gt;
&lt;p&gt;Key Value Configurations are Value Pairs for managing associative arrays assigned to the &lt;em&gt;Object&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Key Value Pairs can be assigned at multiple levels, from the Global &lt;em&gt;Domain&lt;/em&gt; down to an individual &lt;em&gt;Component&lt;/em&gt; and have a &amp;ldquo;scope.&amp;rdquo; Lower level Objects can override a higher level Object.  Below is the order in which Key Value Pairs can be overridden:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Global&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Contains all Environment variables and any &amp;ldquo;additional Key Value Pairs&amp;rdquo; set by the user when running that task.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides any Global Key Value Pairs during a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the &lt;em&gt;Environment&lt;/em&gt; Key Value Pairsduring a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the &lt;em&gt;Application&lt;/em&gt; Key Value Pairs during a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the  &lt;em&gt;Application&lt;/em&gt; Key Value Pairs during a deployed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Key Value Pairs can be given any Name and a Value. Use +Add to add Key Value Pairs to the table. Use Save to confirm.  Use the checkbox to Delete or Edit a Key Value Pair.&lt;/p&gt;
&lt;h2 id=&#34;consuming-_applications_&#34;&gt;Consuming &lt;em&gt;Applications&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;This section shows a list of all &lt;em&gt;Applications&lt;/em&gt; that are consuming this &lt;em&gt;Component&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;key-value-configurations-1&#34;&gt;Key Value Configurations&lt;/h3&gt;
&lt;p&gt;Key Value Configurations are Value Pairs for managing associative arrays assigned to the &lt;em&gt;Object&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Key Value Pairs can be assigned at multiple levels, from the Global &lt;em&gt;Domain&lt;/em&gt; down to an individual &lt;em&gt;Component&lt;/em&gt; and have a &amp;ldquo;scope.&amp;rdquo; Lower level Objects can override a higher level Object.  Below is the order in which Key Value Pairs can be overridden:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Global&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Contains all Environment variables and any &amp;ldquo;additional Key Value Pairs&amp;rdquo; set by the user when running that task.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides any Global Key Value Pairs during a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the &lt;em&gt;Environment&lt;/em&gt; Key Value Pairsduring a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endpoint&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the &lt;em&gt;Application&lt;/em&gt; Key Value Pairs during a deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Component&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Overrides the  &lt;em&gt;Application&lt;/em&gt; Key Value Pairs during a deployed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Key Value Pairs can be given any Name and a Value. Use +Add to add Key Value Pairs to the table. Use Save to confirm.  Use the checkbox to Delete or Edit a Key Value Pair.&lt;/p&gt;
&lt;h3 id=&#34;consuming-_applications_-1&#34;&gt;Consuming &lt;em&gt;Applications&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;This section shows a list of all &lt;em&gt;Applications&lt;/em&gt; that are consuming this &lt;em&gt;Component&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;_endpoints_&#34;&gt;&lt;em&gt;Endpoints&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;This section lists all &lt;em&gt;Endpoints&lt;/em&gt; that the &lt;em&gt;Component&lt;/em&gt; has been installed to with its Deployment Number. The Deployment Number is generated by DeployHub for each unique deployment.  You can also use this section to stop incremental deployments and force a specific version to be deployed to the &lt;em&gt;Endpoint&lt;/em&gt;. By manually adding a specific &lt;em&gt;Component Version&lt;/em&gt; to the &lt;em&gt;Endpoint&lt;/em&gt;, you bypass the incremental deployment logic of the deployment engine.  For example, if you would like to deploy a particular container without accepting any intermediate updates, you would go to the intermediate &lt;em&gt;Component Versions&lt;/em&gt; and manually add them to the &lt;em&gt;Endpoints&lt;/em&gt;, causing the deployment engine to believe that it was previously deployed. When you manually add an &lt;em&gt;Endpoint&lt;/em&gt;, the Deployment Number will show &amp;ldquo;manually deployed.&amp;rdquo; To manually add a &lt;em&gt;Component&lt;/em&gt; to an &lt;em&gt;Endpoint&lt;/em&gt;, use the +Add option. You will be provided a list of available &lt;em&gt;Endpoints&lt;/em&gt;. Use Save to commit the change to the table. You can select multiple &lt;em&gt;Endpoints&lt;/em&gt;.  To Edit or Delete an &lt;em&gt;Endpoint&lt;/em&gt;, select the &lt;em&gt;Endpoint&lt;/em&gt; and use the Edit or Delete option.&lt;/p&gt;
&lt;h3 id=&#34;audit-trail&#34;&gt;Audit Trail&lt;/h3&gt;
&lt;p&gt;The Audit Trail displays audit entries for any changes or deployments that impact this object. It includes all changes in the object including &lt;em&gt;User&lt;/em&gt; date and time, and deployments with unique numbers.&lt;/p&gt;
&lt;p&gt;For deployment audits, select a deployment number to see the details including:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Access&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Log&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The output of the deployment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Any files or objects deployed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Step Duration&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Deployment Steps with time required to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Feedback Loop&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Shows what was updated starting from &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can also Subscribe or Comment to an Audit Entry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Subscribe: Allows you to receive information about the selected deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment: Click on &amp;lsquo;Comment&amp;rsquo; to add information. There is a field above the list labeled &amp;ldquo;Say something about this Application&amp;rdquo; that can have comments placed into it, and files can be attached to the comment as well. Entering text into this field activates the Add Message button. Click to save the comment as a line in the list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Files to Comments: Click on the paperclip icon to add a file to the message.  Once done, click on the &amp;ldquo;Add Message&amp;rdquo; button. These attachments can later be retrieved by clicking on the paperclip icon which then displays the name of the file within a list. Choose the file to download it into the your default Download directory on your local computer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;access&#34;&gt;Access&lt;/h3&gt;
&lt;p&gt;The Access Section allows &lt;em&gt;Users&lt;/em&gt; within designated &lt;em&gt;Groups&lt;/em&gt; to update or view the &lt;em&gt;Component&lt;/em&gt;. To add a &lt;em&gt;Group&lt;/em&gt; to one of the access lists, drag and drop the &lt;em&gt;Group&lt;/em&gt; from the Available Groups list onto desired access list. All &lt;em&gt;Users&lt;/em&gt; who belong to a &lt;em&gt;Group&lt;/em&gt; that appear in one of the Access lists will be granted access to the &lt;em&gt;Component&lt;/em&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Access&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This allows any &lt;em&gt;User&lt;/em&gt; that belongs to any &lt;em&gt;Group&lt;/em&gt; in this list to see the selected &lt;em&gt;Component&lt;/em&gt; in the List View.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This allows any &lt;em&gt;User&lt;/em&gt; that belongs to any &lt;em&gt;Group&lt;/em&gt; in this list to make changes to the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_component_-dependency-map&#34;&gt;&lt;em&gt;Component&lt;/em&gt; Dependency Map&lt;/h2&gt;
&lt;p&gt;The Dependency Map provides a graphical view of all &lt;em&gt;Applications&lt;/em&gt; that is consuming this &lt;em&gt;Component&lt;/em&gt;. This will remain empty until your  &lt;em&gt;Component&lt;/em&gt; is used by an an &lt;em&gt;Application&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deployhub-pro-change-requests&#34;&gt;DeployHub Pro Change Requests&lt;/h3&gt;
&lt;p&gt;The integration of Change Request systems are supported in DeployHub through the use of a &lt;em&gt;Data Source&lt;/em&gt;. To integrate Change Request you must first define a Change Request &lt;em&gt;Data Source&lt;/em&gt; from the &lt;em&gt;Data Source&lt;/em&gt; Dashboard. Once created, you will be able to select the &lt;em&gt;Data Source&lt;/em&gt; from the General Details &amp;ldquo;Change Request &lt;em&gt;Data Source&lt;/em&gt;&amp;rdquo; field of your &lt;em&gt;Application&lt;/em&gt; and/or &lt;em&gt;Component&lt;/em&gt;. When you have a Change Request &lt;em&gt;Data Source&lt;/em&gt; defined, you can add issue tickets using the Change Request section of the &lt;em&gt;Application&lt;/em&gt; or &lt;em&gt;Component&lt;/em&gt; Dashboards.&lt;/p&gt;
&lt;h4 id=&#34;creating-change-request-_data-sources_&#34;&gt;Creating Change Request &lt;em&gt;Data Sources&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Jira, Bugzilla and GitHub are represented in DeployHub as &lt;em&gt;Data Source&lt;/em&gt; Types. Because a &lt;em&gt;Data Source&lt;/em&gt; is associated to a specific &lt;em&gt;Component&lt;/em&gt; or &lt;em&gt;Application&lt;/em&gt; you will need to map a unique &lt;em&gt;Data Source&lt;/em&gt; for each system&amp;rsquo;s repository (Organization, Repository, Product, Project Key) where you are tracking the &lt;em&gt;Component&lt;/em&gt; or &lt;em&gt;Application&lt;/em&gt;.  In a traditional release process, a &lt;em&gt;Component&lt;/em&gt; and &lt;em&gt;Application&amp;rsquo;s&lt;/em&gt; repository may be the same.  Because microservices are often managed in their own repositories, you may need to define a &lt;em&gt;Data Source&lt;/em&gt; for each of your microservice &lt;em&gt;Components&lt;/em&gt;. For more on creating a Change Request &lt;em&gt;Data Source&lt;/em&gt; see &lt;a href=&#34;/userguide/profeatures/2-data-sources/&#34;&gt;Managing Data Sources&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Change Request that are tracked at the &lt;em&gt;Component&lt;/em&gt; level are rolled up to the &lt;em&gt;Application&lt;/em&gt; level.  All change request associated to &lt;em&gt;Components&lt;/em&gt; and &lt;em&gt;Applications&lt;/em&gt; are rolled up to the &lt;em&gt;Release&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once connected, the Change Request Section for the &lt;em&gt;Component&lt;/em&gt; and the &lt;em&gt;Application&lt;/em&gt; shows all Change Request manually added. If a &lt;em&gt;Data Source&lt;/em&gt; has not been assigned, you will see a message &amp;ldquo;No Change Request Data Source has been setup.&amp;rdquo;  Once setup, you can use the &amp;lsquo;+Add&amp;rsquo; option to associate specific change request to the &lt;em&gt;Component&lt;/em&gt; or &lt;em&gt;Application&lt;/em&gt;. Selecting +Add will create a new row in the table with a drop down list box.  This drop down will contain all change request retrieved by the &lt;em&gt;Data Source&lt;/em&gt;. Select the Change Request and use the Save option to commit the new row to the table.  Use the Edit option to switch a Change Request, or Delete to remove a Change Request.&lt;/p&gt;
&lt;h2 id=&#34;publish-a-new-_component-version_-based-on-an-existing-_component-version_&#34;&gt;Publish a New &lt;em&gt;Component Version&lt;/em&gt; Based on an Existing &lt;em&gt;Component Version&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Create &lt;em&gt;Component Versions&lt;/em&gt; that are patterned after the &lt;em&gt;Component Base Version&lt;/em&gt; or any &lt;em&gt;Component Version&lt;/em&gt;. Check the box &lt;em&gt;Component Base Version&lt;/em&gt; or &lt;em&gt;Component Versions&lt;/em&gt; from which you want to base the new version. Select the New Version Tab to access the &lt;em&gt;Component&lt;/em&gt; Dashboard and then edit the new &lt;em&gt;Component Version&lt;/em&gt;. When you manually create a new &lt;em&gt;Component Version&lt;/em&gt; the name will be auto generated with a new number. You may need to provide it a unique name based on your versioning patterns.&lt;/p&gt;
&lt;h2 id=&#34;publish-new-_component-versions_-automatically-via-cicd-pipeline&#34;&gt;Publish New &lt;em&gt;Component Versions&lt;/em&gt; automatically via CI/CD Pipeline&lt;/h2&gt;
&lt;p&gt;Configure your CI/CD Pipeline to automatically update new &lt;em&gt;Component Versions&lt;/em&gt; each time a new GitCommit triggers the workflow process.  Add DeployHub to the workflow to perform the continuous versioning of new &lt;em&gt;Components&lt;/em&gt; and their consuming &lt;em&gt;Applications&lt;/em&gt;.  For more information, see &lt;a href=&#34;/userguide/integrations/ci-cd_integrations/&#34;&gt;Using DeployHub with CI/CD&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
